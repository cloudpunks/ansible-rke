# Standards: 1.2
---
- name: Install rke binary
  get_url:
    url: "{{ rke_binary_download }}"
    checksum: "{{ rke_binary_checksum }}"
    dest: /usr/bin/rke
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags:
    - rke

- name: Create config directory
  file:
    path: "{{ rke_config_dir }}"
    state: directory
    owner: root
    group: root
  tags:
    - rke

- name: Create addons directory
  when: (rke_addon_default + rke_addon_extra) | length > 0
  file:
    path: "{{ rke_config_dir }}/addons"
    state: directory
    owner: root
    group: root
  tags:
    - rke

- name: Write addon config
  loop: "{{ rke_addon_default + rke_addon_extra }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.url | default(False) or item.state | default('present') == 'present'
  register: rke_addon_create
  copy:
    content: "{{ item.content | to_nice_yaml(indent=2) }}"
    dest: "{{ rke_config_dir }}/addons/{{ item.name }}.yml"
    owner: root
    group: root
    mode: u=rw,g=r,o=
  tags:
    - rke

- name: Remove addon config
  loop: "{{ rke_addon_default + rke_addon_extra }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') == 'absent'
  register: rke_addon_remove
  file:
    path: "{{ rke_config_dir }}/addons/{{ item.name }}.yml"
    state: absent
  tags:
    - rke

- name: Write cluster config
  register: rke_config_file
  template:
    src: config.j2
    dest: "{{ rke_config_dir }}/cluster.yml"
    owner: root
    group: root
    mode: u=rw,g=r,o=
  tags:
    - rke

- name: Force cluster update
  when: rke_force_update or rke_config_file.changed or rke_addon_create.changed or rke_addon_remove.changed
  shell:
    cmd: rke up | tee -a /var/log/rke.log
    chdir: "{{ rke_config_dir }}"
  tags:
    - rke

- name: Write profile script
  template:
    src: profile.j2
    dest: /etc/profile.d/rke.sh
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  tags:
    - rke

- name: Check kube config
  when: rke_copy_kubeconfig | default(False)
  register: rke_config_check
  until: rke_config_check.stat.exists
  retries: 10
  delay: 5
  stat:
    path: "{{ rke_config_dir }}/kube_config_cluster.yml"
  tags:
    - rke

- name: Fetch kube config
  when: rke_config_check.stat.exists | default(False)
  register: rke_config_slurp
  slurp:
    src: "{{ rke_config_dir }}/kube_config_cluster.yml"
  tags:
    - rke

- name: Extract kube config
  when: rke_config_slurp.content | default(False)
  set_fact:
    rke_config_content: "{{ rke_config_slurp.content | b64decode | from_yaml }}"
  tags:
    - rke

- name: Update kube config
  when: rke_config_slurp.content | default(False) and rke_external_domain | default(False)
  set_fact:
    rke_config_content: "{{ rke_config_content | combine({ 'clusters': [ { 'name': rke_cluster_name, 'cluster': { 'certificate-authority-data': rke_config_content['clusters'][0]['cluster']['certificate-authority-data'], 'server': rke_external_domain } } ] }, recursive=True) }}"
  tags:
    - rke

- name: Create kube directory
  when: rke_config_slurp.content | default(False)
  loop: "{{ rke_copy_kubeconfig | sort }}"
  delegate_to: "{{ item }}"
  file:
    path: /etc/kubernetes
    state: directory
  tags:
    - rke

- name: Copy kube config
  when: rke_config_slurp.content | default(False)
  loop: "{{ rke_copy_kubeconfig | sort }}"
  delegate_to: "{{ item }}"
  copy:
    content: "{{ rke_config_content | to_nice_yaml(indent=2) }}"
    dest: /etc/kubernetes/admin.conf
    owner: "{{ rke_config_owner }}"
    group: "{{ rke_config_group }}"
    mode: "{{ rke_config_mode }}"
  tags:
    - rke

...
